---
const { class: className } = Astro.props
---

<div id="workout-heatmap" class:list={[className]}></div>

<script>
  import CalHeatmap from 'cal-heatmap'
  import 'cal-heatmap/cal-heatmap.css'

  // Fetch and parse CSV data on client side
  async function loadWorkoutData() {
    try {
      const response = await fetch('/records/workouts.csv')
      const csvText = await response.text()

      // Parse CSV manually
      const lines = csvText.trim().split('\n')
      const data = lines.slice(1).map(line => {
        const values = line.split(',')
        return {
          date: values[0]?.replace(/"/g, '') || ''
        }
      })

      // Group workouts by date and count exercises
      const workoutsByDate: Record<string, number> = {}
      data.forEach(row => {
        if (row.date && row.date.match(/^\d{4}-\d{2}-\d{2}$/)) {
          const dateStr = row.date
          if (!workoutsByDate[dateStr]) {
            workoutsByDate[dateStr] = 0
          }
          workoutsByDate[dateStr]++
        }
      })

      // Convert to cal-heatmap format (timestamp in seconds, using local timezone)
      return Object.entries(workoutsByDate).map(([date, count]) => {
        // Parse date as YYYY-MM-DD and create local midnight timestamp
        const [year, month, day] = date.split('-').map(Number)
        const localDate = new Date(year, month - 1, day) // month is 0-indexed
        const timestamp = Math.floor(localDate.getTime() / 1000)
        return {
          date: timestamp,
          value: count
        }
      })
    } catch (error) {
      console.error('Failed to load workout data:', error)
      return []
    }
  }

  // Initialize heatmap
  loadWorkoutData().then(data => {
    console.log('Loaded workout data:', data) // Debug log
    
    // Test: Check if timestamp matches expected format
    if (data.length > 0) {
      const testDate = new Date(data[0].date * 1000)
      console.log('First data point:', {
        timestamp: data[0].date,
        value: data[0].value,
        dateString: testDate.toISOString(),
        localDate: testDate.toLocaleDateString()
      })
    }
    
    // Detect current theme
    const isDark = document.documentElement.classList.contains('dark') || 
                   window.matchMedia('(prefers-color-scheme: dark)').matches
    
    const cal = new CalHeatmap()
    cal.paint(
      {
        theme: isDark ? 'dark' : 'light',
        itemSelector: '#workout-heatmap',
        data: {
          source: data,
          x: (d) => d.date, // Timestamp in seconds
          y: (d) => d.value, // Exercise count
        },
        date: { start: new Date('2025-07-01') }, // Start from July 2025
        range: 4, // Show 4 months
        scale: {
          color: {
            type: 'threshold',
            range: ['#ebedf0', '#9be9a8', '#40c463', '#30a14e', '#216e39'], // GitHub 스타일 (회색 -> 녹색)
            domain: [1, 3, 6, 10], // 임계값: 0, 1-2, 3-5, 6-9, 10+
          },
        },
        domain: {
          type: 'month',
          gutter: 4,
          label: { text: 'MMM', textAlign: 'start', position: 'top' },
        },
        subDomain: { type: 'day', radius: 2, width: 11, height: 11, gutter: 4 },
      },
      [
        // You can add plugins here if needed
        // [Tooltip, { text: (date, value) => `${value} exercises on ${date}` }],
        // [Legend, { label: 'Workouts' }],
      ]
    )
  })
</script>

<style>
  #workout-heatmap {
    margin: 2rem 0;
  }

  :global(.ch-domain) {
    font-family: inherit;
  }
</style>
